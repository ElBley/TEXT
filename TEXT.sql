/*************************************************/
/* SCRIPT PARA LA CREACION DE UNA BASE DE DATOS DE UNA EMPRESA TEXTIL */
/*************************************************/
SET AUTOCOMMIT on;

/**********************************************************/
/* 1.- Sentencias de borrado de todas las tablas y vistas */
/**********************************************************/

DROP TABLE DEVOLUCION CASCADE CONSTRAINTS;
DROP TABLE PROVEEDOR CASCADE CONSTRAINTS;
DROP TABLE DISENHO CASCADE CONSTRAINTS;
DROP TABLE ARTICULO CASCADE CONSTRAINTS;
DROP TABLE ENTREGA CASCADE CONSTRAINTS;
DROP TABLE ALMACEN CASCADE CONSTRAINTS;
DROP TABLE LOCAL CASCADE CONSTRAINTS;
DROP TABLE TIENDA CASCADE CONSTRAINTS;
DROP TABLE TRASTIENDA CASCADE CONSTRAINTS;
DROP TABLE EMPLEADO CASCADE CONSTRAINTS;
DROP TABLE FAMILIAR CASCADE CONSTRAINTS;
DROP TABLE ENCARGADO CASCADE CONSTRAINTS;
DROP TABLE DEPENDIENTE CASCADE CONSTRAINTS;
DROP TABLE DISENHADOR CASCADE CONSTRAINTS;
DROP TABLE TREND_HUNTER CASCADE CONSTRAINTS;
DROP TABLE ALMACEN_GUARDA_ARTICULO CASCADE CONSTRAINTS;
DROP TABLE DISENHADOR_REALIZA_DISENHO CASCADE CONSTRAINTS;

DROP VIEW V_HOMBRE;
DROP VIEW V_MUJER;
DROP VIEW V_NINHO;
DROP VIEW V_DISENHO;
DROP VIEW V_EMPLEADO;
DROP VIEW V_EMPLEADO_TIENDA;
DROP VIEW V_ARTICULO_ALMACEN;

DROP PROCEDURE Trasvase;
DROP FUNCTION Venta;
DROP FUNCTION ListarProveedores;
DROP FUNCTION InversionTienda;
DROP PROCEDURE SueldoEmpleados;
DROP FUNCTION DevolucionesPorProveedor;


/**************************************************/
/* 2.- Creamos las tablas de nuestro Diagrama EER */
/**************************************************/


CREATE TABLE PROVEEDOR
(
  NIF VARCHAR2(9),
  TELF_PROVEEDOR    VARCHAR2(13) NOT NULL,
  DIREC_PROVEEDOR VARCHAR2(50),
  NOMBRE_PROVEEDOR  VARCHAR2(30) NOT NULL,
      PRIMARY KEY (NIF),
      
    CONSTRAINT Telefono_Correcto CHECK(REGEXP_LIKE(TELF_PROVEEDOR,'^(9|6)[0-9]{8}$') OR REGEXP_LIKE(TELF_PROVEEDOR,'^34[0-9]{9}$')),
    CONSTRAINT Dni_Correcto CHECK(REGEXP_LIKE(NIF,'^[0-9]{8}[A-Z]{1}$'))
);

--Son tres tablas distintas, indicadas por el atributo tipo
CREATE TABLE DISENHO
(
COD_DISENHO  VARCHAR2(10),
PATRON_DISENHO VARCHAR2(50),
PRECIO  DECIMAL(5,2) NOT NULL,
DESCRIPCION_DISENHO  VARCHAR2(300),
MATERIAL VARCHAR2(15) NOT NULL,
TIPO VARCHAR2(6) NOT NULL,
TIPO_HOMBRE VARCHAR2(15),
TIPO_MUJER VARCHAR2(15),
EDAD VARCHAR2(15),
SEXO VARCHAR2(5),
    PRIMARY KEY (COD_DISENHO),
    
    CONSTRAINT DisenhoBase_Correcto CHECK(PRECIO>0 AND EDAD>0),
    
    CONSTRAINT Tipo_Correcto CHECK(TIPO='HOMBRE' OR TIPO='MUJER' OR TIPO='NINHO'),
    
    CONSTRAINT TipoHombre_Correcto CHECK(TIPO_HOMBRE='ABRIGOS' OR 
                                         TIPO_HOMBRE='CAZADORAS' OR
                                         TIPO_HOMBRE='TRAJES' OR
                                         TIPO_HOMBRE='BLAZERS' OR
                                         TIPO_HOMBRE='CAMISAS' OR
                                         TIPO_HOMBRE='PUNTO' OR
                                         TIPO_HOMBRE='PANTALONES' OR
                                         TIPO_HOMBRE='JEANS' OR
                                         TIPO_HOMBRE='PANA' OR
                                         TIPO_HOMBRE='CHANDAL' OR
                                         TIPO_HOMBRE='SUDADERAS' OR
                                         TIPO_HOMBRE='CAMISETAS' OR
                                         TIPO_HOMBRE='POLOS' OR
                                         TIPO_HOMBRE='ZAPATOS' OR
                                         TIPO_HOMBRE='MOCHILAS' OR
                                         TIPO_HOMBRE='BISUTERIA' OR
                                         TIPO_HOMBRE='RELOJES' OR
                                         TIPO_HOMBRE='ACCESORIOS'),
                                         
    CONSTRAINT TipoMujer_Correcto CHECK(TIPO_MUJER='ABRIGOS' OR
                                        TIPO_MUJER='CAZADORAS' OR
                                        TIPO_MUJER='PLUMIFEROS' OR
                                        TIPO_MUJER='BLAZERS' OR
                                        TIPO_MUJER='VESTIDOS' OR
                                        TIPO_MUJER='MONO' OR
                                        TIPO_MUJER='CAMISAS' OR
                                        TIPO_MUJER='TOPS' OR
                                        TIPO_MUJER='PUNTO' OR
                                        TIPO_MUJER='PANTALONES' OR
                                        TIPO_MUJER='JEANS' OR
                                        TIPO_MUJER='FALDAS' OR
                                        TIPO_MUJER='SHORTS' OR
                                        TIPO_MUJER='CAMISETAS' OR
                                        TIPO_MUJER='SUDADERAS' OR
                                        TIPO_MUJER='ZAPATOS' OR
                                        TIPO_MUJER='BOLSOS' OR
                                        TIPO_MUJER='ACCESORIOS' OR
                                        TIPO_MUJER='BASICOS' OR
                                        TIPO_MUJER='TRAJES'),
    
     CONSTRAINT Sexo_Correcto CHECK(SEXO='NINHO' OR SEXO='NINHA' OR SEXO='INFANTIL')
    
    
                                         
);


CREATE TABLE ARTICULO
(
  COD_ARTICULO VARCHAR2(10),
  TALLA    VARCHAR2(5) NOT NULL,
  COLOR VARCHAR2(15) NOT NULL,
  NIF_PROVEEDOR VARCHAR2(9) NOT NULL,
  COD_DISENHO VARCHAR2(10) NOT NULL,
  FOREIGN KEY (COD_DISENHO) REFERENCES DISENHO(COD_DISENHO),
  FOREIGN KEY (NIF_PROVEEDOR) REFERENCES PROVEEDOR(NIF),
      PRIMARY KEY (COD_ARTICULO),
      CONSTRAINT DniProveedor_Correcto CHECK(REGEXP_LIKE(NIF_PROVEEDOR,'^[0-9]{8}[A-Z]{1}$')),
      CONSTRAINT Talla_Correcta CHECK(TALLA='XS' OR TALLA='S' OR TALLA='M' OR TALLA='L' OR TALLA='XL' OR TALLA='XXL' OR TALLA='3XL' OR TALLA='4XL' OR TALLA='5XL' OR TALLA='6XL' OR REGEXP_LIKE(TALLA,'^([1-9]){1}([0-9])?([0-9])?$'))
      
);

CREATE TABLE ENTREGA
(
  NIF_PROVEEDOR VARCHAR2(9),
  COD_ARTICULO  VARCHAR2(10),
  FOREIGN KEY (NIF_PROVEEDOR) REFERENCES PROVEEDOR(NIF),
  FOREIGN KEY (COD_ARTICULO) REFERENCES ARTICULO(COD_ARTICULO),
      PRIMARY KEY (NIF_PROVEEDOR,COD_ARTICULO),
      CONSTRAINT DniProveedorEntrega_Correcto CHECK(REGEXP_LIKE(NIF_PROVEEDOR,'^[0-9]{8}[A-Z]{1}$'))
);


CREATE TABLE DEVOLUCION
(
  NIF_PROVEEDOR  VARCHAR2(10),
  COD_ARTICULO   VARCHAR2(10),
  TELF_DEVOLUCION   VARCHAR2(13) NOT NULL,
  FECHA DATE NOT NULL,
        FOREIGN KEY (NIF_PROVEEDOR,COD_ARTICULO) REFERENCES ENTREGA(NIF_PROVEEDOR,COD_ARTICULO) ON DELETE CASCADE,
        PRIMARY KEY (NIF_PROVEEDOR,COD_ARTICULO),
        CONSTRAINT DniProveedorDev_Correcto CHECK(REGEXP_LIKE(NIF_PROVEEDOR,'^[0-9]{8}[A-Z]{1}$')),
        CONSTRAINT Fecha_Correcta CHECK(FECHA>TO_DATE('01/01/2018','DD/MM/YY'))
);

CREATE TABLE ALMACEN
(
  COD_ALMACEN VARCHAR2(10),
  SUPERFICIE    NUMBER(10) NOT NULL,
  STOCK NUMBER(10) NOT NULL,
  COD_RELACION VARCHAR2(10) NOT NULL,
  UNIQUE(COD_RELACION),
      PRIMARY KEY (COD_ALMACEN),
  CONSTRAINT ALMACEN_Correcto CHECK(SUPERFICIE>0 AND STOCK>=0)
);

CREATE TABLE LOCAL
(
  COD_LOCAL VARCHAR2(20),
  DIREC_LOCAL VARCHAR2(50) NOT NULL,
  COD_RELACION VARCHAR2(10),
  -- hay que poner on update cascade
    FOREIGN KEY(COD_RELACION) REFERENCES ALMACEN(COD_RELACION) ON DELETE SET NULL,
    PRIMARY KEY(COD_LOCAL)
);

CREATE TABLE TIENDA
(
  COD_TIENDA VARCHAR2(10),
  TELF_TIENDA    VARCHAR2(13) NOT NULL,
  HORARIO VARCHAR2(50) NOT NULL,
  DIREC_TIENDA  VARCHAR2(50) NOT NULL,
      PRIMARY KEY (COD_TIENDA),
      CONSTRAINT TelefonoTiend_Correcto CHECK(REGEXP_LIKE(TELF_TIENDA,'^(9|6)[0-9]{8}$') OR REGEXP_LIKE(TELF_TIENDA,'^34[0-9]{9}$'))
);

CREATE TABLE TRASTIENDA
(
  COD_TRASTIENDA VARCHAR2(10),
  COD_TIENDA VARCHAR2(10) NOT NULL,
  COD_RELACION VARCHAR2(10),
    -- hay que poner on update cascade
    FOREIGN KEY(COD_RELACION) REFERENCES ALMACEN(COD_RELACION) ON DELETE SET NULL,
    FOREIGN KEY (COD_TIENDA) REFERENCES TIENDA(COD_TIENDA) ON DELETE CASCADE,
    PRIMARY KEY(COD_TRASTIENDA)
);

--Todos los empleados tienen que pertenecer a al menos un tipo de empleado: dependiente,diseÃ±ador, o encargado
CREATE TABLE EMPLEADO
(
  DNI VARCHAR2(9),
  NOMBRE_EMPLEADO VARCHAR2(50) NOT NULL,
  SALARIO   DECIMAL(7,2) NOT NULL,
  DIREC_EMPLEADO  VARCHAR2(50),
  TELF_EMPLEADO VARCHAR2(13) NOT NULL,
  COD_TIENDA VARCHAR2(10) NOT NULL,
  SUPERVISOR VARCHAR2(9),
    FOREIGN KEY(COD_TIENDA) REFERENCES TIENDA(COD_TIENDA),
      PRIMARY KEY (DNI),
      CONSTRAINT Empleado_Correcto CHECK(REGEXP_LIKE(DNI,'^[0-9]{8}[A-Z]{1}$') AND SALARIO>0 AND (REGEXP_LIKE(TELF_EMPLEADO,'^(9|6)[0-9]{8}$') OR REGEXP_LIKE(TELF_EMPLEADO,'^34[0-9]{9}$')))
      
);

ALTER TABLE EMPLEADO ADD FOREIGN KEY(SUPERVISOR) REFERENCES EMPLEADO(DNI) ON DELETE SET NULL;

CREATE TABLE FAMILIAR
(
  DNI VARCHAR2(9),
  NSECUENCIAL NUMBER(2),
  TELF_FAMILIAR VARCHAR2(13) NOT NULL,
  FOREIGN KEY(DNI) REFERENCES EMPLEADO(DNI) ON DELETE CASCADE,
    PRIMARY KEY(DNI,NSECUENCIAL),
    CONSTRAINT Familiar_Correcto CHECK (REGEXP_LIKE(DNI,'^[0-9]{8}[A-Z]{1}$') AND (REGEXP_LIKE(TELF_FAMILIAR,'^(9|6)[0-9]{8}$') OR REGEXP_LIKE(TELF_FAMILIAR,'^34[0-9]{9}$')))
);

CREATE TABLE ENCARGADO
(
  DNI VARCHAR2(9),
  COD_TIENDA VARCHAR2(10) NOT NULL,
  FOREIGN KEY (DNI) REFERENCES EMPLEADO(DNI) ON DELETE CASCADE,
  FOREIGN KEY (COD_TIENDA) REFERENCES TIENDA(COD_TIENDA) ON DELETE SET NULL,
      PRIMARY KEY (DNI),
      CONSTRAINT Encargado_Correcto CHECK (REGEXP_LIKE(DNI,'^[0-9]{8}[A-Z]{1}$'))

);

CREATE TABLE DEPENDIENTE
(
  DNI VARCHAR2(9),
  COMIS DECIMAL(7,2) NOT NULL,
  FOREIGN KEY (DNI) REFERENCES EMPLEADO(DNI) ON DELETE CASCADE,
      PRIMARY KEY (DNI),
      CONSTRAINT Dependiente_Correcto CHECK (REGEXP_LIKE(DNI,'^[0-9]{8}[A-Z]{1}$'))

);

CREATE TABLE DISENHADOR
(
DNI VARCHAR2(9),
COD_TALLER VARCHAR2(15),
FOREIGN KEY (DNI) REFERENCES EMPLEADO(DNI) ON DELETE CASCADE,
      PRIMARY KEY (DNI),
       CONSTRAINT Disenhador_Correcto CHECK (REGEXP_LIKE(DNI,'^[0-9]{8}[A-Z]{1}$'))

);


CREATE TABLE TREND_HUNTER
(
  DNI VARCHAR2(9),
  BONIFICACION DECIMAL(7,2) NOT NULL,
  FOREIGN KEY(DNI) REFERENCES DISENHADOR(DNI) ON DELETE CASCADE,
  FOREIGN KEY(DNI) REFERENCES DEPENDIENTE(DNI) ON DELETE CASCADE,
      PRIMARY KEY(DNI),
       CONSTRAINT TrendHunter_Correcto CHECK (REGEXP_LIKE(DNI,'^[0-9]{8}[A-Z]{1}$'))
);


CREATE TABLE ALMACEN_GUARDA_ARTICULO
(
  COD_ALMACEN VARCHAR2(10),
  COD_ARTICULO VARCHAR2(10),
  FOREIGN KEY(COD_ALMACEN) REFERENCES ALMACEN(COD_ALMACEN) ON DELETE CASCADE,
  FOREIGN KEY(COD_ARTICULO) REFERENCES ARTICULO(COD_ARTICULO) ON DELETE CASCADE,
      PRIMARY KEY(COD_ALMACEN,COD_ARTICULO)
);

CREATE TABLE DISENHADOR_REALIZA_DISENHO
(
  DNI VARCHAR2(9),
  COD_DISENHO VARCHAR2(10),
    FOREIGN KEY(DNI) REFERENCES DISENHADOR(DNI) ON DELETE CASCADE,
    FOREIGN KEY(COD_DISENHO) REFERENCES DISENHO(COD_DISENHO) ON DELETE CASCADE,
    PRIMARY KEY(DNI,COD_DISENHO),
    CONSTRAINT DisenhadDis_Correcto CHECK (REGEXP_LIKE(DNI,'^[0-9]{8}[A-Z]{1}$'))

);

/*******************************************************/
/* 3.- Creamos los Ã­ndices necesarios sobre las tablas */
/*******************************************************/

CREATE INDEX STOCKINDEX ON ALMACEN (stock);
CREATE INDEX TIPOINDEX ON DISENHO(tipo);
CREATE INDEX TALLAARTICULOINDEX ON ARTICULO(COD_DISENHO,TALLA);
CREATE INDEX EMPLEADOTIENDAINDEX ON EMPLEADO(COD_TIENDA);




/************************************************/
/* 4.- Creamos las vistas para nuestra temÃ¡tica */
/************************************************/



-- Vista actualizable
CREATE OR REPLACE VIEW V_HOMBRE (COD_DISENHO, PATRON, PRECIO, MATERIAL, TIPO, TIPO_HOMBRE) AS 
  SELECT COD_DISENHO, PATRON_DISENHO, PRECIO, MATERIAL, TIPO, TIPO_HOMBRE
  FROM  DISENHO
  WHERE TIPO='HOMBRE';

--Vista actualizable

CREATE OR REPLACE VIEW V_MUJER (COD_DISENHO, PATRON, PRECIO, MATERIAL, TIPO, TIPO_MUJER) AS 
  SELECT COD_DISENHO, PATRON_DISENHO, PRECIO, MATERIAL, TIPO, TIPO_MUJER
  FROM  DISENHO
  WHERE TIPO='MUJER';

--Vista actualizable

CREATE OR REPLACE VIEW V_NINHO (COD_DISENHO, PATRON, PRECIO, MATERIAL, TIPO, EDAD, SEXO) AS 
  SELECT COD_DISENHO, PATRON_DISENHO, PRECIO, MATERIAL, TIPO, EDAD, SEXO
  FROM  DISENHO
  WHERE TIPO='NINHO';

--Vista actualizable

CREATE OR REPLACE VIEW V_DISENHO (COD_DISENHO, PATRON, PRECIO, MATERIAL, TIPO) AS 
  SELECT COD_DISENHO, PATRON_DISENHO , PRECIO, MATERIAL, TIPO
  FROM  DISENHO;

-- Vista actualizable
  
CREATE OR REPLACE VIEW V_EMPLEADO (DNI_EMPLEADO, DIREC_EMPLEADO, TELF_EMPLEADO, NOMBRE_EMPLEADO, DNI_SUPERVISOR) AS 
  SELECT DNI, DIREC_EMPLEADO, TELF_EMPLEADO, NOMBRE_EMPLEADO, SUPERVISOR
  FROM  EMPLEADO;

-- Vista NO actualizable

CREATE OR REPLACE VIEW V_ARTICULO_ALMACEN (CODIGO_ALMACEN, CODIGO_ARTICULO, TALLA, COLOR, DESCRIPCION, PRECIO, MATERIAL, PATRON) AS 
  SELECT ALM.COD_ALMACEN,  ART.COD_ARTICULO, ART.TALLA, ART.COLOR, DIS.DESCRIPCION_DISENHO, DIS.PRECIO, DIS.MATERIAL, DIS.PATRON_DISENHO
  FROM ARTICULO ART, ALMACEN ALM, ALMACEN_GUARDA_ARTICULO REL, DISENHO DIS
  WHERE ART.COD_ARTICULO = REL.COD_ARTICULO AND REL.COD_ALMACEN = ALM.COD_ALMACEN AND ART.COD_DISENHO = DIS.COD_DISENHO;

-- Vista NO actualizable

CREATE OR REPLACE VIEW V_EMPLEADO_TIENDA (COD_TIENDA, DIRECCION_TIENDA, DNI_EMPLEADO, NOMBRE_EMPLEADO) AS 
  SELECT T.COD_TIENDA, T.DIREC_TIENDA, E.DNI, E.NOMBRE_EMPLEADO
  FROM TIENDA T, EMPLEADO E
  WHERE E.COD_TIENDA = T.COD_TIENDA;


/*********************************************************/
/* 5.- Insertamos datos de ejemplo para todas las tablas */
/*********************************************************/

  


/* PROVEEDOR */
INSERT INTO PROVEEDOR(NIF,TELF_PROVEEDOR,DIREC_PROVEEDOR,NOMBRE_PROVEEDOR) VALUES('25955036A',988323241,'Calle RosalÃ­a n 23 Santiago de Compostela','Pepe SL');
INSERT INTO PROVEEDOR(NIF,TELF_PROVEEDOR,DIREC_PROVEEDOR,NOMBRE_PROVEEDOR) VALUES('97352708B',988423242,'Poligono Barreiros Ourense','Rodolfo SA');
INSERT INTO PROVEEDOR(NIF,TELF_PROVEEDOR,DIREC_PROVEEDOR,NOMBRE_PROVEEDOR) VALUES('77532667C',988523243,'Calle Barcelona n 35 Vigo','Callejero Enterprises');
INSERT INTO PROVEEDOR(NIF,TELF_PROVEEDOR,DIREC_PROVEEDOR,NOMBRE_PROVEEDOR) VALUES('50297767D',988623244,'Calle San Rosendo n 84 Ourense','BestEfford');

-- tabla DISENHO
INSERT INTO DISENHO(COD_DISENHO,PATRON_DISENHO,PRECIO,DESCRIPCION_DISENHO,MATERIAL,TIPO,TIPO_HOMBRE,TIPO_MUJER,EDAD,SEXO) VALUES (18776678,239091,600,'Vestido corto de cuello subido y manga larga .','ALGODÃN','MUJER','','VESTIDOS','','');
INSERT INTO DISENHO(COD_DISENHO,PATRON_DISENHO,PRECIO,DESCRIPCION_DISENHO,MATERIAL,TIPO,TIPO_HOMBRE,TIPO_MUJER,EDAD,SEXO) VALUES (26678,239091,70,'Sudadera con cuello subido y manga larga.','LINO','MUJER','','SUDADERAS','','');
INSERT INTO DISENHO(COD_DISENHO,PATRON_DISENHO,PRECIO,DESCRIPCION_DISENHO,MATERIAL,TIPO,TIPO_HOMBRE,TIPO_MUJER,EDAD,SEXO) VALUES (374578,239091,30,'PantalÃ³n de tiro alto con tejido de tul combinado a tono.','LANA','MUJER','','PANTALONES','','');
INSERT INTO DISENHO(COD_DISENHO,PATRON_DISENHO,PRECIO,DESCRIPCION_DISENHO,MATERIAL,TIPO,TIPO_HOMBRE,TIPO_MUJER,EDAD,SEXO) VALUES (4556678,239091,20,'Falda de tiro alto con el delantero tipo pareo asimÃ©trico.','LINO','MUJER','','FALDAS','','');

INSERT INTO DISENHO(COD_DISENHO,PATRON_DISENHO,PRECIO,DESCRIPCION_DISENHO,MATERIAL,TIPO,TIPO_HOMBRE,TIPO_MUJER,EDAD,SEXO) VALUES (8054321,0456334,23,'Camisa amplia de cuello y manga corta.','ALGODÃN','HOMBRE','CAMISAS','','','');
INSERT INTO DISENHO(COD_DISENHO,PATRON_DISENHO,PRECIO,DESCRIPCION_DISENHO,MATERIAL,TIPO,TIPO_HOMBRE,TIPO_MUJER,EDAD,SEXO) VALUES (3434321,0456334,18,'Sudadera amplia de cuello con capucha ajustable y manga larga','ALGODÃN','HOMBRE','SUDADERAS','','','');
INSERT INTO DISENHO(COD_DISENHO,PATRON_DISENHO,PRECIO,DESCRIPCION_DISENHO,MATERIAL,TIPO,TIPO_HOMBRE,TIPO_MUJER,EDAD,SEXO) VALUES (64321,0456334,200,'Jeans skinny. Cinco bolsillos. Cierre frontal con cremallera y botÃ³n metÃ¡lico.','LICRA','HOMBRE','JEANS','','','');
INSERT INTO DISENHO(COD_DISENHO,PATRON_DISENHO,PRECIO,DESCRIPCION_DISENHO,MATERIAL,TIPO,TIPO_HOMBRE,TIPO_MUJER,EDAD,SEXO) VALUES (784321,0456334,97,'Jersey de punto ligero con cuello tipo polo y manga larga.','POLIÃSTER','HOMBRE','POLOS','','','');

INSERT INTO DISENHO(COD_DISENHO,PATRON_DISENHO,PRECIO,DESCRIPCION_DISENHO,MATERIAL,TIPO,TIPO_HOMBRE,TIPO_MUJER,EDAD,SEXO) VALUES (78641,44628931,70,'Abrigo de cuello  con manga larga. ','ALGODÃN','NINHO','','',5,'NINHO');
INSERT INTO DISENHO(COD_DISENHO,PATRON_DISENHO,PRECIO,DESCRIPCION_DISENHO,MATERIAL,TIPO,TIPO_HOMBRE,TIPO_MUJER,EDAD,SEXO) VALUES (2341,936281,80,'PantalÃ³n engomado con cinturilla interior ajustable y cierre botones frontal. Cinco bolsillos.','LICRA','NINHO','','',3,'NINHA');
INSERT INTO DISENHO(COD_DISENHO,PATRON_DISENHO,PRECIO,DESCRIPCION_DISENHO,MATERIAL,TIPO,TIPO_HOMBRE,TIPO_MUJER,EDAD,SEXO) VALUES (75671,44628931,70,'Jersey de punto cuello redondo y manga larga. Detalle bandas bicolor.','LANA','NINHO','','',7,'NINHA');
INSERT INTO DISENHO(COD_DISENHO,PATRON_DISENHO,PRECIO,DESCRIPCION_DISENHO,MATERIAL,TIPO,TIPO_HOMBRE,TIPO_MUJER,EDAD,SEXO) VALUES (52341,936281,80,'Abrigo de paÃ±o tipo masculino con cuello solapas acabado pico y manga larga. Cierre botones frontal y bolsillos delanteros tipo ojal.','LANA','NINHO','','',8,'NINHO');

-- tabla ARTICULO
INSERT INTO ARTICULO(COD_ARTICULO, TALLA,COLOR,NIF_PROVEEDOR,COD_DISENHO) VALUES (754658256,'L','rojo','25955036A','4556678');
INSERT INTO ARTICULO(COD_ARTICULO, TALLA,COLOR,NIF_PROVEEDOR,COD_DISENHO) VALUES (11,'XL','amarillo','77532667C','784321');
INSERT INTO ARTICULO(COD_ARTICULO, TALLA,COLOR,NIF_PROVEEDOR,COD_DISENHO) VALUES (2348245673,'M','azul','25955036A','75671');
INSERT INTO ARTICULO(COD_ARTICULO, TALLA,COLOR,NIF_PROVEEDOR,COD_DISENHO) VALUES (17,'48','verde','50297767D','75671');


/* ENTREGA */
INSERT INTO ENTREGA(NIF_PROVEEDOR,COD_ARTICULO) VALUES('25955036A',754658256);
INSERT INTO ENTREGA(NIF_PROVEEDOR,COD_ARTICULO) VALUES('97352708B',11);
INSERT INTO ENTREGA(NIF_PROVEEDOR,COD_ARTICULO) VALUES('77532667C',2348245673);
INSERT INTO ENTREGA(NIF_PROVEEDOR,COD_ARTICULO) VALUES('50297767D',17);

/* DEVOLUCION */
INSERT INTO DEVOLUCION( NIF_PROVEEDOR, COD_ARTICULO,TELF_DEVOLUCION,FECHA) VALUES ('25955036A',754658256,988263234,'13/02/2018');
INSERT INTO DEVOLUCION( NIF_PROVEEDOR, COD_ARTICULO,TELF_DEVOLUCION,FECHA) VALUES ('77532667C',2348245673,988353536,'23/03/2018');
INSERT INTO DEVOLUCION( NIF_PROVEEDOR, COD_ARTICULO,TELF_DEVOLUCION,FECHA) VALUES ('97352708B',11,988264236,'21/12/2018');
INSERT INTO DEVOLUCION( NIF_PROVEEDOR, COD_ARTICULO,TELF_DEVOLUCION,FECHA) VALUES ('50297767D',17,988264236,'13/02/2019');

-- tabla ALMACEN
INSERT INTO ALMACEN(COD_ALMACEN, SUPERFICIE, STOCK,COD_RELACION) VALUES (1978245672,1234512345,1234567812,'AB234');
INSERT INTO ALMACEN(COD_ALMACEN, SUPERFICIE, STOCK,COD_RELACION) VALUES (10,8,1,'AC843');
INSERT INTO ALMACEN(COD_ALMACEN, SUPERFICIE, STOCK,COD_RELACION) VALUES (2348245672,1237892345,123409812,'VX324');
INSERT INTO ALMACEN(COD_ALMACEN, SUPERFICIE, STOCK,COD_RELACION) VALUES (13,80,12,'BZ165');

-- tabla LOCAL
INSERT INTO LOCAL(COD_LOCAL,DIREC_LOCAL,COD_RELACION) VALUES (13,'Poligono Industral de Redondela, Nave 12','BZ165');


/* TIENDA */
INSERT INTO TIENDA(COD_TIENDA,TELF_TIENDA,HORARIO,DIREC_TIENDA)VALUES('20202020',924459967,'LUNES A VIERNES DE 7:00 a 22:00','Calle VianÃ©s nÂº 42, Ourense'); 
INSERT INTO TIENDA(COD_TIENDA,TELF_TIENDA,HORARIO,DIREC_TIENDA)VALUES('23252627',924454967,'LUNES A S?BADO DE 8:00 a 22:00','Calle Barcelo nÂº 21, Vigo'); 
INSERT INTO TIENDA(COD_TIENDA,TELF_TIENDA,HORARIO,DIREC_TIENDA)VALUES('21242527',924457967,'MARTES A VIERNES DE 7:00 a 22:00','Calle San Rosendo nÂº 57,Santiago de Compostela'); 
INSERT INTO TIENDA(COD_TIENDA,TELF_TIENDA,HORARIO,DIREC_TIENDA)VALUES('28262623',924458967,'MIERCOLES A DOMINGO DE 9:00 a 23:30','Calle Paseo nÂº 62, Pontevedra');


/* TRASTIENDA */
INSERT INTO TRASTIENDA(COD_TRASTIENDA,COD_TIENDA,COD_RELACION)VALUES(1978245672,'20202020','AB234');
INSERT INTO TRASTIENDA(COD_TRASTIENDA,COD_TIENDA,COD_RELACION)VALUES(10,'23252627','AC843');
INSERT INTO TRASTIENDA(COD_TRASTIENDA,COD_TIENDA,COD_RELACION)VALUES(2348245672,'21242527','BZ165');


/* EMPLEADO */
INSERT INTO EMPLEADO(DNI,NOMBRE_EMPLEADO,SALARIO,DIREC_EMPLEADO,TELF_EMPLEADO,COD_TIENDA)VALUES('23289753A','Jose Antonio ?lvarez GimÃ©nez',2500.42,'Calle Barcelona nÂº 73,Pontevedra',673233445,'20202020');
INSERT INTO EMPLEADO(DNI,NOMBRE_EMPLEADO,SALARIO,DIREC_EMPLEADO,TELF_EMPLEADO,COD_TIENDA)VALUES('10479766B','MarÃ­a AsunciÃ³n GonzÃ¡lez PÃ©rez',2532.42,'Calle Paseo nÂº 32,Vigo',683433448,'21242527');
INSERT INTO EMPLEADO(DNI,NOMBRE_EMPLEADO,SALARIO,DIREC_EMPLEADO,TELF_EMPLEADO,COD_TIENDA)VALUES('80234032C','Rosa Seijas FernÃ¡ndez',2640.42,'Calle Conde nÂº 73,A CouruÃ±a',633263448,'20202020');
INSERT INTO EMPLEADO(DNI,NOMBRE_EMPLEADO,SALARIO,DIREC_EMPLEADO,TELF_EMPLEADO,COD_TIENDA)VALUES('47875906D','Rodolfo GonzÃ¡lez Arrabusta',2874.42,'Calle RÃ­o Sil nÂº 43,Ourense',688263545,'20202020'); 
INSERT INTO EMPLEADO(DNI,NOMBRE_EMPLEADO,SALARIO,DIREC_EMPLEADO,TELF_EMPLEADO,COD_TIENDA)VALUES('43503930E','David GonzÃ¡lez Malcuerna',2274.45,'Calle ColÃ³n nÂº 42,Villa Franca del Bierzo',632263565,'21242527'); 
INSERT INTO EMPLEADO(DNI,NOMBRE_EMPLEADO,SALARIO,DIREC_EMPLEADO,TELF_EMPLEADO,COD_TIENDA)VALUES('17111542F','Robustiano de los Santos',2678.02,'Calle RÃ­o BarbaÃ±a nÂº 43,Ourense',645263545,'28262623'); 
INSERT INTO EMPLEADO(DNI,NOMBRE_EMPLEADO,SALARIO,DIREC_EMPLEADO,TELF_EMPLEADO,COD_TIENDA)VALUES('89346244G','Hermelinda RamÃ­rez de la Costa',2024.24,'Calle Paseo nÂº 43,Pontevedra',678563545,'21242527'); 
INSERT INTO EMPLEADO(DNI,NOMBRE_EMPLEADO,SALARIO,DIREC_EMPLEADO,TELF_EMPLEADO,COD_TIENDA)VALUES('51832794H','Fernanda Isabel de los Santos',2394.26,'nÂº 43, A CaÃ±iza',698826345,'20202020'); 


/* FAMILIAR */
INSERT INTO FAMILIAR(DNI,NSECUENCIAL,TELF_FAMILIAR)VALUES('23289753A',1,955344321);
INSERT INTO FAMILIAR(DNI,NSECUENCIAL,TELF_FAMILIAR)VALUES('10479766B',1,632908741);
INSERT INTO FAMILIAR(DNI,NSECUENCIAL,TELF_FAMILIAR)VALUES('23289753A',2,612351876);


/* ENCARGADO */
INSERT INTO ENCARGADO(DNI,COD_TIENDA)VALUES('23289753A','20202020');
INSERT INTO ENCARGADO(DNI,COD_TIENDA)VALUES('10479766B','23252627');


/* DEPENDIENTE */
INSERT INTO DEPENDIENTE(DNI,COMIS)VALUES('43503930E','939,3');
INSERT INTO DEPENDIENTE(DNI,COMIS)VALUES('51832794H','120,4');
INSERT INTO DEPENDIENTE(DNI,COMIS)VALUES('17111542F','120,4');


-- tabla DISENHADOR
INSERT INTO DISENHADOR(DNI , COD_TALLER) VALUES ('43503930E',23091);
INSERT INTO DISENHADOR(DNI , COD_TALLER) VALUES ('89346244G',456334);
INSERT INTO DISENHADOR(DNI , COD_TALLER) VALUES ('51832794H',4464531);
INSERT INTO DISENHADOR(DNI , COD_TALLER) VALUES ('10479766B',9346831);



/* TREND_HUNTER */
INSERT INTO TREND_HUNTER(DNI,BONIFICACION)VALUES('51832794H',0);
INSERT INTO TREND_HUNTER(DNI,BONIFICACION)VALUES('43503930E',40.4);

-- tabla ALMACEN_GUARDA_ARTICULO
INSERT INTO ALMACEN_GUARDA_ARTICULO(COD_ALMACEN,COD_ARTICULO) VALUES (1978245672,754658256);
INSERT INTO ALMACEN_GUARDA_ARTICULO(COD_ALMACEN,COD_ARTICULO) VALUES (10,11);
INSERT INTO ALMACEN_GUARDA_ARTICULO(COD_ALMACEN,COD_ARTICULO) VALUES (2348245672,2348245673);
INSERT INTO ALMACEN_GUARDA_ARTICULO(COD_ALMACEN,COD_ARTICULO) VALUES (13,17);

  
-- tabla DISENHADOR_REALIZA_DISENHO
INSERT INTO DISENHADOR_REALIZA_DISENHO(DNI,COD_DISENHO) VALUES ('43503930E',78641);
INSERT INTO DISENHADOR_REALIZA_DISENHO(DNI,COD_DISENHO) VALUES ('89346244G',2341);
INSERT INTO DISENHADOR_REALIZA_DISENHO(DNI,COD_DISENHO) VALUES ('51832794H',75671);
INSERT INTO DISENHADOR_REALIZA_DISENHO(DNI,COD_DISENHO) VALUES ('10479766B',52341);


/********************************************/
/* 6.- IncluÃ­mos sentencias de comprobaciÃ³n */
/********************************************/

SELECT DNI,NOMBRE_EMPLEADO,SALARIO FROM EMPLEADO;

SELECT * FROM V_EMPLEADO_TIENDA;

SELECT * FROM V_HOMBRE;
UPDATE V_HOMBRE SET PRECIO = 90.7  WHERE( COD_DISENHO='784321' );
SELECT * FROM V_HOMBRE; 

SELECT * FROM V_ARTICULO_ALMACEN;




/*****************************************/
/* 7.- Procedimientos y Funciones PL/SQL */
/*****************************************/


--La funcion venta elimina un articulo de la base de datos, suma una comision al dependiente que lo vendio
--y devuelve el precio del articulo eliminado

CREATE OR REPLACE
FUNCTION Venta(Dependiente IN VARCHAR2, Articulo IN VARCHAR2)
RETURN NUMBER
IS

   EXCEPTION_ARTICULO_VACIO EXCEPTION;
   EXCEPTION_NO_HAY_DEPENDIENTE  EXCEPTION;

   CURSOR C_Articulo IS 
      SELECT a.COD_ARTICULO
      FROM ARTICULO a, ALMACEN_GUARDA_ARTICULO rel, ALMACEN al, TRASTIENDA t
      WHERE a.COD_ARTICULO = Articulo AND a.COD_ARTICULO = rel.COD_ARTICULO AND 
      rel.COD_ALMACEN = al.COD_ALMACEN AND al.COD_RELACION = t.COD_RELACION
      FOR UPDATE;

    CURSOR C_Dependiente IS
      SELECT comis, DNI
      FROM  DEPENDIENTE
      WHERE DNI = Dependiente
      FOR UPDATE;
BEGIN
OPEN C_Articulo

   
EXCEPTION
  WHEN EXCEPTION_ARTICULO_VACIO THEN
    DBMS_OUTPUT.PUT_LINE('El articulo no existe en ninguna trastienda');
  WHEN EXCEPTION_NO_HAY_DEPENDIENTE THEN
    DBMS_OUTPUT.PUT_LINE('El dependiente es incorrecto');
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('CÃ³digo: ' || SQLCODE);
END Venta;
/
show errors

--El procedimiento Trasvase mueve un numero de articulos con un diseÃ±o determindo, de un local a una trastienda,
--imprimiendo por pantalla los codigos de los articulos que se mueven.

CREATE OR REPLACE
PROCEDURE Trasvase(Almacen IN VARCHAR2, Trastienda IN VARCHAR2, Disenho IN VARCHAR2, 
  Talla, IN VARCHAR2, Color IN VARCHAR2, Cantidad IN NUMBER)
IS

   EXCEPTION_ARTICULO_VACIO EXCEPTION;
   EXCEPTION_NO_EXISTE_ALMACEN  EXCEPTION;
   EXCEPTION_INSUFICIENTES_ARTICULOS EXCEPTION;

   CURSOR C_Articulo IS 
      SELECT a.COD_ARTICULO
      FROM ARTICULO a, ALMACEN_GUARDA_ARTICULO rel, ALMACEN al, LOCAL l
      WHERE a.COLOR = Color AND a.Disenho = Disenho AND a.Talla = talla AND a.COD_ARTICULO = rel.COD_ARTICULO AND 
      rel.COD_ALMACEN = al.COD_ALMACEN AND al.COD_RELACION = l.COD_RELACION;

    CURSOR C_Almacen IS
      SELECT COD_ALMACEN
      FROM  ALMACEN a, TRASTIENDA t
      WHERE t.COD_TRASTIENDA = Trastienda AND t.COD_RELACION = a.COD_RELACION;

    CURSOR C_RELACION IS
      SELECT COD_ARTICULO, COD_ALMACEN
      FROM ALMACEN_GUARDA_ARTICULO
      FOR UPDATE;


BEGIN
  
  
  

EXCEPTION
  WHEN EXCEPTION_ARTICULO_VACIO THEN
    DBMS_OUTPUT.PUT_LINE('El articulo no existe en ningun local');
  WHEN EXCEPTION_NO_EXISTE_DEPENDIENTE THEN
    DBMS_OUTPUT.PUT_LINE('El dependiente es incorrecto');
  WHEN EXCEPTION_INSUFICIENTES_ARTICULOS THEN
    DBMS_OUTPUT.PUT_LINE('No hay suficientes articulos con esa descripcion en el local');
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('CÃ³digo: ' || SQLCODE);
END Trasvase;
/
show errors

--Listar provedores devuelve el numero de provedores de un almacen y un array con los datos de los mismos

CREATE OR REPLACE
FUNCTION ListarProveedores(Almacen IN VARCHAR2, Lista OUT array)
RETURN NUMBER
IS

   CURSOR Proveedores IS 
      SELECT DISTINCT p.NIF, p.NOMBRE_PROVEEDOR, p.DIREC_PROVEEDOR, p.TELF_PROVEEDOR
      FROM ALMACEN_GUARDA_ARTICULO rel, ARTICULO a, PROVEEDOR p
      WHERE rel.CODIGO_ALMACEN = Almacen, a.CODIGO_ARTICULO = rel.COD_ARTICULO, a.NIF_PROVEEDOR = p.NIF;
BEGIN

   
EXCEPTION
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('CÃ³digo: ' || SQLCODE);
END ListarProveedores;
/
show errors

--InversionTienda devuelve el coste de un mes concreto de una tienda

CREATE OR REPLACE
FUNCTION InversionTienda(Tienda VARCHAR2)
RETURN NUMBER
IS

  -- hay que filtrar por tienda
   CURSOR Empleados IS 
      SELECT DNI,SALARIO
      FROM EMPLEADO

    CURSOR Dependientes IS
      SELECT DNI,COMIS
      FROM DEPENDIENTE

    CURSOR Hunters IS
      SELECT DNI,BONIFICACION
      FROM TREND_HUNTER

BEGIN

   
EXCEPTION
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('CÃ³digo: ' || SQLCODE);
END InversionTienda;
/
show errors

--El procedimiento SueldoEmpleados devuelve una matriz que tiene en cada fila el dni y el sueldo del empleado ese mes.
--Al delvolver el array todas las bonificaciones acumulativas de salario se reinician.

CREATE OR REPLACE
PROCEDURE SueldoEmpleados(Matriz OUT array)
IS

    CURSOR Empleados IS 
      SELECT DNI_EMPLEADO,SALARIO
      FROM EMPLEADO
      WHERE DNI_EMPLEADO NOT IN (SELECT DNI_EMPLEADO FROM DEPENDIENTE);

    CURSOR Dependientes IS
      SELECT DNI_EMPLEADO,COMIS,SALARIO
      FROM DEPENDIENTE d, EMPLEADO e
      WHERE d.DNI_EMPLEADO = e.DNI_EMPLEADO AND DNI NOT IN (SELECT DNI FROM TREND_HUNTER);

    CURSOR Hunters IS
      SELECT DNI_EMPLEADO,BONIFICACION, COMIS, SALARIO
      FROM TREND_HUNTER th, DEPENDIENTE d, EMPLEADO e
      WHERE th.DNI_EMPLEADO, d.DNI_EMPLEADO AND th.DNI_EMPLEADO = e.DNI_EMPLEADO

BEGIN

   
EXCEPTION
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('CÃ³digo: ' || SQLCODE);
END SueldoEmpleados;
/
show errors

--La funcion DevolucionesPorProveedor devuelve el porcentage de devoluciones por entregas que ha echo un proveedor

CREATE OR REPLACE
FUNCTION DevolucionesPorProveedor(Proveedor VARCHAR2)
RETURN NUMBER
IS
  entregas NUMBER;
  devoluciones NUMBER;      

BEGIN
  
  SELECT COUNT(d.NIF_PROVEEDOR) INTO devoluciones
    FROM ENTREGA e, DEVOLUCION d
    WHERE e.NIF_PROVEEDOR = Proveedor AND e.NIF_PROVEEDOR = d.NIF_PROVEEDOR;

  SELECT COUNT(e.NIF_PROVEEDOR) INTO entregas
    FROM ENTREGA e
    WHERE NIF_PROVEEDOR = Proveedor;
   
    RETURN (devoluciones/entregas * 100);

EXCEPTION
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('CÃ³digo: ' || SQLCODE);
END DevolucionesPorProveedor;
/
show errors


/********************************************************/
/* 9.- Bloque para prueba de Procedimientos y Funciones */
/********************************************************/

SET SERVEROUTPUT ON